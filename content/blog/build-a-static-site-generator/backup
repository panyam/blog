






But we can do slightly better as an interface.   We will be dealing *a lot* with files but it may be helpful to have an abstraction over them.   Let us go with the `Resource` (may be an Asset or Content could be a better name?.  Naming *is* hard).   Let us use the following definition for a Resource (which in our case is a wrapper over files but more as we will see):

```go

const (
	ResourceStatePending = iota
	ResourceStateLoaded
	ResourceStateDeleted
	ResourceStateNotFound
	ResourceStateFailed
)

type Resource struct {
	Site     *Site  // Site this resource belongs to
	FullPath string // Unique URI/Path

	// Info about the resource
	info os.FileInfo

	// Created timestamp on disk
	CreatedAt time.Time

	// Updated time stamp on disk
	UpdatedAt time.Time

	// Loaded, Pending, NotFound, Failed
	State int

	// Any errors with this resource
	Error error
}
```

Here instead of directly dealing with files (via their paths) we will create some metadata over it so we can get some helpers (like extensions, any errors in loading, their load state, some timestamps).   We can also add more to this as we evolve our requirements (which we shall see soon).  With this we can update our Walker method:

```go
type ResourceFilterFunc func(res *Resource) bool
type ResourceSortFunc func(a *Resource, b *Resource) bool

func (s *Site) ListResources(filterFunc ResourceFilterFunc,
	sortFunc ResourceSortFunc,
	offset int, count int) []*Resource {
	var foundResources []*Resource
	// keep a map of files encountered and their statuses
	filepath.WalkDir(s.ContentRoot, func(fullpath string, info os.DirEntry, err error) error {
		if err != nil {
			// just print err related to the path and stop scanning
			// if this err means something else we can do other things here
			log.Println("Error in path: ", info, err)
			return err
		}

		if info.IsDir() {
      // just recurse into directories as before
      // we should probably have a checker if this is a valid dir to recurse into (eg is it 
			return nil  
		}

		res := s.GetResource(fullpath)

		if filterFunc == nil || filterFunc(res) {
			foundResources = append(foundResources, res)
		}

		return nil
	})
	if sortFunc != nil {
		sort.Slice(foundResources, func(idx1, idx2 int) bool {
			ent1 := foundResources[idx1]
			ent2 := foundResources[idx2]
			return sortFunc(ent1, ent2)
		})
	}
	if offset > 0 {
		foundResources = foundResources[offset:]
	}
	if count > 0 {
		foundResources = foundResources[:count]
	}
	return foundResources
}
```

We have a done a few things now:

1. Instead of working directly with files, we have introduced a Resource construct that keeps track of a file in our content root.  
2. Our List method also accepts functions to "filter", "sort" and "slice" resources by *some* criteria (this will be useful in the future).
3. We convert the fullpath of a visited file with the `GetResource` method on the site.  This gives us an opportunity to cache resource entries along with all its state etc.

Our GetResource implementation is simple, we keep encountered resources in a private map:

```go
type Site struct {
  ...
  
	resources map[string]*Resource
}

func (s *Site) GetResource(fullpath string) *Resource {
	res, found := s.resources[fullpath]
	if res == nil || !found {
		res = &Resource{
			Site:      s,
			FullPath:  fullpath,
			CreatedAt: time.Now(),
			UpdatedAt: time.Now(),
			State:     ResourceStatePending,
		}
		s.resources[fullpath] = res
	}
	if res.Info() == nil {
		log.Println("Resource info is null: ", res.FullPath)
	}

	return res
}
```

Now we see two new interesting methods on the Resource - `Load` and `Info`.   The Info method is straightforward - it is a wrapper over `os.Stat` to cache load states and errors.


```go
func (r *Resource) Info() os.FileInfo {
	if r.info == nil {
		r.info, r.Error = os.Stat(r.FullPath)
		if r.Error != nil {
			r.State = ResourceStateFailed
			log.Println("Error Getting Info: ", r.FullPath, r.Error)
		}
	}
	return r.info
}
```

The `Load` method on the Resource type is more interesting - and more involved.  So we will defer this for now and come back to it.  Sorry!

```go
func (r *Resource) Load() *Resource {
  // TODO - All the interesting content processing bits
  return r
}
```

And with that we can complete our site's Load method:

```go
func (s *Site) Load() *Site {
	foundResources := s.ListResources(nil, nil, 0, 0)
	for _, res := range foundResources {
	  s.Rebuild(res)
  }
	return s
}

// The main method that builds a resource into the output folder
func (s *Site) Rebuild(res *Resource) {
	// var errors []error
	srcpath := res.FullPath
	if strings.HasSuffix(srcpath, ".md") ||
		strings.HasSuffix(srcpath, ".mdx") ||
		strings.HasSuffix(srcpath, ".html") ||
		strings.HasSuffix(srcpath, ".htm") {
		destpath := res.DestPathFor()
		outres := s.GetResource(destpath)
		if outres != nil {
			outres.EnsureDir()
			outfile, err := os.Create(outres.FullPath)
			if err != nil {
				log.Println("Error writing to: ", outres.FullPath, err)
				return
			}
			defer outfile.Close()

			// Copy the file over if it is a .md or a .html file
		}
	}
}
```

Our `Load` method is simple - it first loads *all* the resources, and then rebuilds each resource.  The `Rebuild` method - for now - copies any file with the appropriate extension (md, mdx, html, htm) into a particular location within the site's `OutputDir` folder.  The most interesting method here is the `DestPathFor` on the resource - that tells us what target path it should be copied over as:

```go
```

The EnsureDir method is simple and just ensures that a given resource's parent directory exists (creating them if needed):

```go
[func](func) (r *Resource) EnsureDir() {
	dirname := filepath.Dir(r.FullPath)
	if err := os.MkdirAll(dirname, 0755); err != nil {
		log.Println("Error creating dir: ", dirname, err)
	}
}
```
